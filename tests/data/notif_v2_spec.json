{
  "openapi": "3.1.0",
  "paths": {
    "/notifications/behaviorGroups": {
      "post": {
        "summary": "Create a behavior group",
        "description": "Creates a behavior group that defines which notifications will be sent to external services after an event is received. Use this endpoint to control the types of events users are notified about.",
        "operationId": "NotificationResource$V2_createBehaviorGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBehaviorGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBehaviorGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad or no content passed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/behaviorGroups/affectedByRemovalOfEndpoint/{endpointId}": {
      "get": {
        "summary": "List the behavior groups affected by the removal of an endpoint",
        "description": "Lists the behavior groups that are affected by the removal of an endpoint. Use this endpoint to understand how removing an endpoint affects existing behavior groups.",
        "operationId": "NotificationResource$V2_getBehaviorGroupsAffectedByRemovalOfEndpoint",
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BehaviorGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/behaviorGroups/{behaviorGroupId}/actions": {
      "put": {
        "summary": "Update the list of behavior group actions",
        "description": "Updates the list of actions to be executed in that particular behavior group after an event is received.",
        "operationId": "NotificationResource$V2_updateBehaviorGroupActions",
        "parameters": [
          {
            "description": "The UUID of the behavior group to update",
            "name": "behaviorGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/behaviorGroups/{id}": {
      "put": {
        "summary": "Update a behavior group",
        "description": "Updates the details of a behavior group. Use this endpoint to update the list of related endpoints and event types associated with this behavior group.",
        "operationId": "NotificationResource$V2_updateBehaviorGroup",
        "parameters": [
          {
            "description": "The UUID of the behavior group to update",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "requestBody": {
          "description": "New parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBehaviorGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad or no content passed.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No behavior group found with the passed id.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a behavior group",
        "description": "Deletes a behavior group and all of its configured actions. Use this endpoint when you no longer need a behavior group.",
        "operationId": "NotificationResource$V2_deleteBehaviorGroup",
        "parameters": [
          {
            "description": "The UUID of the behavior group to delete",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/bundles/{bundleId}/behaviorGroups": {
      "get": {
        "summary": "List behavior groups in a bundle",
        "description": "Lists the behavior groups associated with a bundle. Use this endpoint to see the behavior groups that are configured for a particular bundle for a particular tenant.",
        "operationId": "NotificationResource$V2_findBehaviorGroupsByBundleId",
        "parameters": [
          {
            "description": "UUID of the bundle to retrieve the behavior groups for.",
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BehaviorGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/bundles/{bundleName}": {
      "get": {
        "summary": "Retrieve a bundle by name",
        "description": "Retrieves the details of a bundle by searching by its name.",
        "operationId": "NotificationResource$V2_getBundleByName",
        "parameters": [
          {
            "name": "bundleName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bundle"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/bundles/{bundleName}/applications/{applicationName}": {
      "get": {
        "summary": "Retrieve an application by bundle and application names",
        "description": "Retrieves an application by bundle and application names. Use this endpoint to  find an application by searching for the bundle that the application is part of. This is useful if you do not know the UUID of the bundle or application.",
        "operationId": "NotificationResource$V2_getApplicationByNameAndBundleName",
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bundleName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/bundles/{bundleName}/applications/{applicationName}/eventTypes/{eventTypeName}": {
      "get": {
        "summary": "Retrieve an event type by bundle, application and event type names",
        "description": "Retrieves the details of an event type by specifying the bundle name, the application name, and the event type name.",
        "operationId": "NotificationResource$V2_getEventTypesByNameAndBundleAndApplicationName",
        "parameters": [
          {
            "name": "applicationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bundleName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventTypeName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventType"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/eventTypes": {
      "get": {
        "summary": "List all event types",
        "description": "Lists all event types. You can filter the returned list by bundle, application name, or unmuted types.",
        "operationId": "NotificationResource$V2_getEventTypes",
        "parameters": [
          {
            "name": "applicationIds",
            "in": "query",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string",
                "format": "uuid",
                "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
              }
            }
          },
          {
            "name": "bundleId",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "eventTypeName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeMutedTypes",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": "20",
              "maximum": 200,
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "deprecated": true
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEventType"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/eventTypes/affectedByRemovalOfBehaviorGroup/{behaviorGroupId}": {
      "get": {
        "summary": "List the event types affected by the removal of a behavior group",
        "description": "Lists the event types that will be affected by the removal of a behavior group. Use this endpoint to see which event types will be removed if you delete a behavior group.",
        "operationId": "NotificationResource$V2_getEventTypesAffectedByRemovalOfBehaviorGroup",
        "parameters": [
          {
            "description": "The UUID of the behavior group to check",
            "name": "behaviorGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/eventTypes/{eventTypeId}/behaviorGroups": {
      "put": {
        "summary": "Update the list of behavior groups for an event type",
        "description": "Updates the list of behavior groups associated with an event type.",
        "operationId": "NotificationResource$V2_updateEventTypeBehaviors",
        "parameters": [
          {
            "description": "UUID of the eventType to associate with the behavior group(s)",
            "name": "eventTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "uniqueItems": true,
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve the behavior groups linked to an event type.",
        "operationId": "NotificationResource$V2_getLinkedBehaviorGroups",
        "parameters": [
          {
            "name": "eventTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": "20",
              "maximum": 200,
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "deprecated": true
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageBehaviorGroup"
                }
              }
            }
          }
        },
        "tags": [
          "V 2"
        ]
      }
    },
    "/notifications/eventTypes/{eventTypeId}/behaviorGroups/{behaviorGroupId}": {
      "delete": {
        "summary": "Delete a behavior group from an event type",
        "description": "Delete a behavior group from the specified event type.",
        "operationId": "NotificationResource$V2_deleteBehaviorGroupFromEventType",
        "parameters": [
          {
            "name": "behaviorGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "eventTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/notifications/eventTypes/{eventTypeId}/endpoints": {
      "put": {
        "summary": "Update the list of endpoints for an event type",
        "description": "Updates the list of endpoints associated with an event type.",
        "operationId": "NotificationResource$V2_updateEventTypeEndpoints",
        "parameters": [
          {
            "description": "UUID of the eventType to associate with the endpoint(s)",
            "name": "eventTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "uniqueItems": true,
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/eventTypes/{eventTypeUuid}/behaviorGroups/{behaviorGroupUuid}": {
      "put": {
        "summary": "Add a behavior group to the given event type.",
        "operationId": "NotificationResource$V2_appendBehaviorGroupToEventType",
        "parameters": [
          {
            "name": "behaviorGroupUuid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "name": "eventTypeUuid",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/notifications/events": {
      "get": {
        "summary": "Retrieve the event log entries",
        "description": "Retrieves the event log entries. Use this endpoint to review a full history of the events related to the tenant. You can sort by the bundle, application, event, and created fields. You can specify the sort order by appending :asc or :desc to the field, for example bundle:desc. Sorting defaults to desc for the created field and to asc for all other fields.",
        "operationId": "EventResource$V2_getEvents",
        "parameters": [
          {
            "name": "appIds",
            "in": "query",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string",
                "format": "uuid",
                "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
              }
            }
          },
          {
            "name": "bundleIds",
            "in": "query",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string",
                "format": "uuid",
                "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
              }
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LocalDate"
            }
          },
          {
            "name": "endpointTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "eventTypeDisplayName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeActions",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeDetails",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includePayload",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invocationResults",
            "in": "query",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": "20",
              "maximum": 200,
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "deprecated": true
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LocalDate"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/components/schemas/EventLogEntryActionStatus"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageEventLogEntry"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/facets/applications": {
      "get": {
        "summary": "List configured applications",
        "description": "Returns a list of configured applications that includes the application name, the display name, and the ID. You can use this list to configure a filter in the UI.",
        "operationId": "NotificationResource$V2_getApplicationsFacets",
        "parameters": [
          {
            "name": "bundleName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Facet"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/facets/bundles": {
      "get": {
        "summary": "List configured bundles",
        "description": "Returns a list of configured bundles that includes the bundle name, the display name, and the ID. You can use this list to configure a filter in the UI.",
        "operationId": "NotificationResource$V2_getBundleFacets",
        "parameters": [
          {
            "name": "includeApplications",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Facet"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/org-config/daily-digest/time-preference": {
      "put": {
        "summary": "Set the daily digest time",
        "description": "Sets the daily digest UTC time. The accepted minute values are 00, 15, 30, and 45. Use this endpoint to set the time when daily emails are sent.",
        "operationId": "OrgConfigResource$V2_saveDailyDigestTimePreference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocalTime"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Invalid minute value specified"
          }
        }
      },
      "get": {
        "summary": "Retrieve the daily digest time",
        "description": "Retrieves the daily digest time setting. Use this endpoint to check the time that daily emails are sent.",
        "operationId": "OrgConfigResource$V2_getDailyDigestTimePreference",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Application": {
        "type": "object",
        "required": [
          "name",
          "display_name",
          "bundle_id"
        ],
        "properties": {
          "created": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "readOnly": true
          },
          "updated": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "readOnly": true
          },
          "id": {
            "$ref": "#/components/schemas/UUID",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[a-z][a-z_0-9-]*"
          },
          "display_name": {
            "type": "string"
          },
          "bundle_id": {
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "BehaviorGroup": {
        "type": "object",
        "required": [
          "display_name",
          "bundle_id"
        ],
        "properties": {
          "created": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "readOnly": true
          },
          "updated": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "readOnly": true
          },
          "id": {
            "$ref": "#/components/schemas/UUID",
            "type": "string",
            "readOnly": true
          },
          "display_name": {
            "type": "string",
            "pattern": "\\S"
          },
          "bundle_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "bundle": {
            "$ref": "#/components/schemas/Bundle"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BehaviorGroupAction"
            }
          },
          "behaviors": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/EventTypeBehavior"
            }
          },
          "default_behavior": {
            "type": "boolean",
            "readOnly": true
          }
        }
      },
      "BehaviorGroupAction": {
        "type": "object",
        "properties": {
          "created": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "readOnly": true
          },
          "id": {
            "$ref": "#/components/schemas/BehaviorGroupActionId"
          },
          "endpoint": {
            "$ref": "#/components/schemas/Endpoint"
          }
        }
      },
      "BehaviorGroupActionId": {
        "type": "object",
        "required": [
          "behaviorGroupId",
          "endpointId"
        ],
        "properties": {
          "behaviorGroupId": {
            "$ref": "#/components/schemas/UUID"
          },
          "endpointId": {
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "Bundle": {
        "type": "object",
        "required": [
          "name",
          "display_name"
        ],
        "properties": {
          "created": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "readOnly": true
          },
          "updated": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "readOnly": true
          },
          "id": {
            "$ref": "#/components/schemas/UUID",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[a-z][a-z_0-9-]*"
          },
          "display_name": {
            "type": "string"
          }
        }
      },
      "CreateBehaviorGroupRequest": {
        "type": "object",
        "required": [
          "display_name"
        ],
        "properties": {
          "bundle_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "bundle_name": {
            "type": "string"
          },
          "display_name": {
            "type": "string",
            "maxLength": 150,
            "pattern": "\\S"
          },
          "endpoint_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
            }
          },
          "event_type_ids": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "format": "uuid",
              "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
            }
          },
          "bundle_uuid_or_bundle_name_valid": {
            "type": "boolean"
          }
        }
      },
      "CreateBehaviorGroupResponse": {
        "type": "object",
        "required": [
          "id",
          "bundle_id",
          "display_name",
          "endpoints",
          "event_types",
          "created"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "bundle_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "display_name": {
            "type": "string"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
            }
          },
          "event_types": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "format": "uuid",
              "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
            }
          },
          "created": {
            "$ref": "#/components/schemas/LocalDateTime"
          }
        }
      },
      "Endpoint": {
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "properties": {
          "created": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "readOnly": true
          },
          "updated": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "readOnly": true
          },
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/EndpointStatus"
          },
          "server_errors": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "properties": {
            "$ref": "#/components/schemas/EndpointProperties"
          },
          "type": {
            "$ref": "#/components/schemas/EndpointType"
          },
          "sub_type": {
            "type": "string"
          }
        }
      },
      "EndpointProperties": {
        "type": "object"
      },
      "EndpointStatus": {
        "type": "string",
        "enum": [
          "READY",
          "UNKNOWN",
          "NEW",
          "PROVISIONING",
          "DELETING",
          "FAILED"
        ]
      },
      "EndpointType": {
        "type": "string",
        "enum": [
          "ansible",
          "camel",
          "drawer",
          "email_subscription",
          "webhook",
          "pagerduty"
        ]
      },
      "EventLogEntry": {
        "type": "object",
        "required": [
          "id",
          "created",
          "bundle",
          "application",
          "event_type",
          "actions"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "created": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "bundle": {
            "type": "string"
          },
          "application": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventLogEntryAction"
            }
          }
        }
      },
      "EventLogEntryAction": {
        "type": "object",
        "required": [
          "id",
          "endpoint_type",
          "invocation_result",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "endpoint_type": {
            "$ref": "#/components/schemas/EndpointType"
          },
          "endpoint_sub_type": {
            "type": "string"
          },
          "invocation_result": {
            "type": "boolean",
            "deprecated": true
          },
          "status": {
            "$ref": "#/components/schemas/EventLogEntryActionStatus"
          },
          "endpoint_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "details": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "EventLogEntryActionStatus": {
        "type": "string",
        "enum": [
          "SENT",
          "SUCCESS",
          "PROCESSING",
          "FAILED",
          "UNKNOWN"
        ]
      },
      "EventType": {
        "type": "object",
        "required": [
          "name",
          "display_name",
          "application_id"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "pattern": "[a-z][a-z_0-9-]*"
          },
          "display_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fully_qualified_name": {
            "type": "string"
          },
          "application_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "application": {
            "$ref": "#/components/schemas/Application"
          },
          "visible": {
            "type": "boolean"
          },
          "subscribed_by_default": {
            "type": "boolean"
          },
          "subscription_locked": {
            "type": "boolean"
          },
          "restrict_to_recipients_integrations": {
            "type": "boolean"
          },
          "not_subscription_locked_or_subscribed_by_default": {
            "type": "boolean"
          }
        }
      },
      "EventTypeBehavior": {
        "type": "object",
        "properties": {
          "created": {
            "$ref": "#/components/schemas/LocalDateTime",
            "type": "string",
            "readOnly": true
          },
          "id": {
            "$ref": "#/components/schemas/EventTypeBehaviorId"
          },
          "event_type": {
            "$ref": "#/components/schemas/EventType"
          }
        }
      },
      "EventTypeBehaviorId": {
        "type": "object",
        "required": [
          "eventTypeId",
          "behaviorGroupId"
        ],
        "properties": {
          "eventTypeId": {
            "$ref": "#/components/schemas/UUID"
          },
          "behaviorGroupId": {
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "Facet": {
        "type": "object",
        "required": [
          "id",
          "name",
          "displayName"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Facet"
            }
          }
        }
      },
      "LocalDate": {
        "type": "string",
        "format": "date",
        "examples": [
          "2022-03-10"
        ]
      },
      "LocalDateTime": {
        "type": "string",
        "format": "date-time",
        "examples": [
          "2022-03-10T12:15:50"
        ]
      },
      "LocalTime": {
        "type": "string",
        "format": "local-time",
        "examples": [
          "13:45:30.123456789"
        ],
        "externalDocs": {
          "description": "As defined by 'partial-time' in RFC3339",
          "url": "https://www.rfc-editor.org/rfc/rfc3339.html#section-5.6"
        }
      },
      "Meta": {
        "type": "object",
        "required": [
          "count"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PageBehaviorGroup": {
        "type": "object",
        "required": [
          "data",
          "links",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BehaviorGroup"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "PageEventLogEntry": {
        "type": "object",
        "required": [
          "data",
          "links",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventLogEntry"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "PageEventType": {
        "type": "object",
        "required": [
          "data",
          "links",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventType"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "UUID": {
        "type": "string",
        "format": "uuid",
        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
      },
      "UpdateBehaviorGroupRequest": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "maxLength": 150
          },
          "endpoint_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
            }
          },
          "event_type_ids": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "format": "uuid",
              "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
            }
          },
          "display_name_not_null_and_blank": {
            "type": "boolean"
          }
        }
      }
    }
  },
  "info": {
    "version": "v2.0",
    "title": "Notifications",
    "description": "The API for Notifications provides endpoints that you can use to create and manage event notifications between third-party applications and the Red Hat Hybrid Cloud Console."
  },
  "servers": [
    {
      "url": "https://console.redhat.com/{basePath}",
      "description": "Production Server",
      "variables": {
        "basePath": {
          "default": "/api/notifications/v2.0"
        }
      }
    },
    {
      "url": "http://localhost:{port}/{basePath}",
      "description": "Development Server",
      "variables": {
        "basePath": {
          "default": "/api/notifications/v2.0"
        },
        "port": {
          "default": "8080"
        }
      }
    }
  ]
}
